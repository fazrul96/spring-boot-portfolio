plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id 'jacoco'
//	id 'checkstyle' // enforce coding style and standards
//	id 'com.github.spotbugs' version '5.3.0' // analysis tool for identifying potential issues
//	id 'findbugs' // analysis tool for identifying potential issues
//	id 'pmd' // source code analyze
//	id 'org.sonarqube' // continuous inspection of code quality
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = 17
	targetCompatibility = 17
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	// email: mailtrap.io
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework:spring-context'
	implementation 'org.springframework:spring-context-support'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	// jacoco
	testImplementation 'junit:junit:4.13.2'
//	testImplementation 'org.testng:testng:7.1.0'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.0.3'
	// tesseract
	implementation 'net.sourceforge.tess4j:tess4j:5.8.0'
	// metrics: micrometer + prometheus
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
}

configurations {
	all*.exclude group: 'commons-logging', module: 'commons-logging'
}

// Reference https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
	toolVersion = "0.8.9"
//	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.required = true
//		html.outputLocation = layout.buildDirectory.dir('reports/tests/test/jacocoHtml') // custom location
	}
}

jacocoTestCoverageVerification {
	violationRules {
		// This rule specifies a minimum code coverage requirement of 50%.
		rule {
			limit {
				minimum = 0.5
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}

tasks.named('test') {
	finalizedBy jacocoTestReport
}